load("@hedron_compile_commands//:refresh_compile_commands.bzl", "refresh_compile_commands")

CXXOPTS = [
    # "-Wno-interference-size",
    "-Wall",
    "-Wextra",
    "-Wshadow",
    "-Wnon-virtual-dtor",
    "-Wpedantic",
    "-Wold-style-cast",
    "-Wcast-align",
    "-Wunused",
    "-Woverloaded-virtual",
    "-Wconversion",
    "-Wsign-conversion",
    "-Wmisleading-indentation",
    "-Wduplicated-cond",
    "-Wduplicated-branches",
    "-Wlogical-op",
    "-Wnull-dereference",
    "-Wuseless-cast",
    "-Wdouble-promotion",
    "-Wformat=2",
]

LINKOPTS = [
    "-lpmemobj",
    "-pthread",
]

refresh_compile_commands(
    name = "refresh_compile_commands",
    exclude_external_sources = True,
    # exclude_headers = "external",
    # exclude_headers = "all",
    targets = {
        "//:cache_warm": "--config=debug",
    },
)

cc_binary(
    name = "cache_warm",
    srcs = ["cache_warm.cpp"],
    cxxopts = CXXOPTS,
    linkopts = LINKOPTS,
    deps = [
        ":Instrumenter",
        ":system_call_main",
    ],
)

cc_binary(
    name = "system_call_main",
    srcs = ["system_call_main.cpp"],
    cxxopts = CXXOPTS,
    linkopts = LINKOPTS,
    deps = [
        ":Instrumenter",
    ],
)

cc_binary(
    name = "call_once",
    srcs = ["call_once.cpp"],
    cxxopts = CXXOPTS,
)

cc_library(
    name = "Instrumenter",
    srcs = ["Instrumenter.cpp"],
    hdrs = ["Instrumenter.h"],
    cxxopts = CXXOPTS,
)
